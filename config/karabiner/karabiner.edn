{:simlayers {:layer-f {:key :f} :layer-j {:key :j} :layer-s {:key :s} :layer-semi-colon {:key :semicolon} :layer-space {:key :spacebar} :layer-d {:key :d}}
 :simlayer-threshold 300
 :main [{:des "layer j"
         :rules [:layer-j
                 [:d :!S9] ;; jd insert (
                 [:f :!S0] ;; jf insert )
                 [:x :!Sopen_bracket] ;; jx insert {
                 [:c :!Sclose_bracket] ;; jc insert }
                 [:e :open_bracket] ;; je insert [
                 [:r :close_bracket] ;; jr insert ]
                 ]}
        {:des "layer f"
         :rules [:layer-f
                 [:j :!S1] ;; fj insert !
                 [:k :equal_sign] ;; fk insert =
                 [:l :!S7] ;; fl insert &
                 [:semicolon :!Sbackslash] ;; f; insert |
                 [:m :!S1] ;; fm insert !
                 [:comma :equal_sign] ;; f, insert =
                 ]}
        {:des "layer s"
                :rules [:layer-s
                        [:d [:equal_sign :!Speriod]]
                        [:f [:!S9 :!S0 :spacebar :equal_sign :!Speriod :spacebar :!Sopen_bracket :!Sclose_bracket :left_arrow]]
                        ]}
        {:des "layer d"
                :rules [:layer-d
                        [:j :!Sequal_sign]
                        [:k :hyphen]
                        [:l :!S8]
                        [:semicolon :slash]
                        ]}
        ; TODO: make the layer automatically hold option when pressed
        {:des "layer semi-colon"
         :rules [:layer-semi-colon
                 [:a :!O1]
                 [:s :!O2]
                 [:d :!O3]
                 [:1 :!O1]
                 [:2 :!O2]
                 [:3 :!O3]
                 [:4 :!O4]
                 [:5 :!O5]
                 [:f :!Of]
                 [:h :!Oh]
                 [:j :!Oj]
                 [:k :!Ok]
                 [:l :!Ol]
                 [:q :!Cq]
                 ]}
        {:des "layer space"
          :rules [:layer-space
                  [:n :down_arrow]
                  [:p :up_arrow]]}
        {:des "Caps is escape when tapped, left command when held"
         :rules [[:##caps_lock :left_command nil {:alone :escape}]]}
        ; {:des "Semi-colon when tapped, option when held"
        ;  :rules [[:##semicolon :left_option nil {:alone :semicolon}]]}
        {:des "Cmd + shift + 3 to take a fullscreen screenshot with flameshot"
             :rules [[:!CS3 "/Applications/flameshot.app/Contents/MacOS/flameshot full"]]}
        {:des "Cmd + shift + 4 to take a partial screenshot with flameshot"
             :rules [[:!CS4 "/Applications/flameshot.app/Contents/MacOS/flameshot gui"]]}
        ; {:des "Custom app launching"
        ;         :rules [[:!Creturn_or_enter "open -a kitty"]
        ;                 [:!CSreturn_or_enter "open -n -a kitty --copy-env --args lf"]
        ;         ]}
        {:des   "Quit application by pressing command-q twice"
             :rules [[
                ;; <from> second cmd-q (when variable "command-q" is 1)
                :!C#Pq
                ;; <to>, 3 to action
                ;; 1. call cmd-q
                ;; 2. set variable "command-q" to 0
                ;; 3. cleanup the :cmdq notification (omit the thrid item to cleanup notification)
                [:!Cq ["command-q" 0] [:noti :cmdq]]
                ;; <condition> when variable "command-q" is 1
                ["command-q" 1]]


               [
                ;; <from> first cmd-q (when variable "command-q" is 0)
                :!C#Pq

                ;; <to>, 2 to action
                ;; 1. show notification with :id :cmdq, :text "Press Again to QUIT"
                ;; 2. set variable "command-q" to 1 (for the second press)
                [[:noti :cmdq "Press again to quit"] ["command-q" 1]]

                ;; <condition> nil means no required condition
                nil

                ;; <additional-option>
                {
                 ;; to_delayed_action documentation
                 ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to-delayed-action/
                 :delayed {
                           ;; run 2 actions when no other key presses after basic.to_delayed_action_delay_milliseconds
                           ;; 1. set variable "command-q" to 0
                           ;; 2. cleanup notification :id :cmdq
                           :invoked  [["command-q" 0] [:noti :cmdq]]

                           ;; run 2 actions when another key presses within basic.to_delayed_action_delay_milliseconds
                           ;; 1. set variable "command-q" to 0
                           ;; 2. cleanup notification :id :cmdq
                           :canceled [["command-q" 0] [:noti :cmdq]]}}]]}
            ]
}

